{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red219\green223\blue228;\red36\green36\blue36;}
{\*\expandedcolortbl;;\cssrgb\c88627\c89804\c91373;\cssrgb\c18824\c18824\c18824;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 #include <Wire.h>\
#include <LiquidCrystal_I2C.h>\
#include <Encoder.h>\
\
// Motor pins\
const int motorEnableA = 9;\
const int motorInput1 = 2;\
const int motorInput2 = 3;\
\
// Potentiometer pin\
const int potPin = A0;\
\
// Create Encoder object\
Encoder myEnc(6, 7);\
\
// Initialize I2C LCD (Address: 0x27, 16 columns, 2 rows)\
LiquidCrystal_I2C lcd(0x27, 16, 2);\
\
// Variables\
int motorSpeed = 0;\
long lastPosition = 0;\
\
void setup() \{\
  Serial.begin(9600);\
  \
  // Initialize LCD\
  lcd.init();\
  lcd.backlight();\
  lcd.print("Starting...");\
  delay(2000);\
  \
  // Initialize motor pins\
  pinMode(motorEnableA, OUTPUT);\
  pinMode(motorInput1, OUTPUT);\
  pinMode(motorInput2, OUTPUT);\
  \
  // Initialize potentiometer pin\
  pinMode(potPin, INPUT);\
\}\
\
void loop() \{\
  // Read potentiometer\
  int potValue = analogRead(potPin);\
  \
  // Convert pot value to motor speed and direction\
  // 0-512 = reverse, 512-1023 = forward\
  if (potValue < 512) \{\
    motorSpeed = map(potValue, 511, 0, 0, 255);  // Reverse\
  \} else \{\
    motorSpeed = map(potValue, 512, 1023, 0, 255);  // Forward\
  \}\
  \
  // Read encoder for position feedback\
  long currentPosition = myEnc.read();\
  \
  // Set motor speed\
  setMotorSpeed(motorSpeed * (potValue < 512 ? -1 : 1));\
  \
  // Update displays\
  if (currentPosition != lastPosition) \{\
    updateLCD(currentPosition, motorSpeed, potValue);\
    updateSerial(currentPosition, motorSpeed, potValue);\
    lastPosition = currentPosition;\
  \}\
  \
  delay(10);\
\}\
\
void setMotorSpeed(int speed) \{\
  speed = constrain(speed, -255, 255);\
  \
  // Dead zone handling\
  if (abs(speed) < 20) \{\
    speed = 0;\
  \}\
  \
  if (speed >= 0) \{\
    digitalWrite(motorInput1, HIGH);\
    digitalWrite(motorInput2, LOW);\
  \} else \{\
    digitalWrite(motorInput1, LOW);\
    digitalWrite(motorInput2, HIGH);\
  \}\
  \
  analogWrite(motorEnableA, abs(speed));\
\}\
\
void updateLCD(long pos, int speed, int pot) \{\
  lcd.clear();\
  lcd.setCursor(0, 0);\
  lcd.print("Pos:");\
  lcd.print(pos);\
  \
  lcd.setCursor(0, 1);\
  lcd.print("Spd:");\
  lcd.print(speed);\
  lcd.print(" P:");\
  lcd.print(pot);\
\}\
\
void updateSerial(long pos, int speed, int pot) \{\
  Serial.print("Position: ");\
  Serial.print(pos);\
  Serial.print(" | Speed: ");\
  Serial.print(speed);\
  Serial.print(" | Pot: ");\
  Serial.print(pot);\
  Serial.print(" | Dir: ");\
  Serial.println(speed >= 0 ? "CW" : "CCW");\
\}}